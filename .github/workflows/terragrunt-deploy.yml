name: Terragrunt Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'management'
        type: choice
        options:
        - management
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TG_VERSION: '0.55.1'
  TF_VERSION: '1.6.6'
  AWS_REGION: 'eu-central-1'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      network-changed: ${{ steps.changes.outputs.network }}
      eks-changed: ${{ steps.changes.outputs.eks }}
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            network:
              - 'accounts/management/terraform/eu-central-1/network/**'
              - 'accounts/management/terragrunt/eu-central-1/network/**'
            eks:
              - 'accounts/management/terraform/eu-central-1/eks/**'
              - 'accounts/management/terragrunt/eu-central-1/eks/**'

      - name: Set deployment matrix
        id: matrix
        run: |
          modules='[]'
          
          if [[ "${{ steps.changes.outputs.network }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            modules=$(echo $modules | jq '. + ["network"]')
          fi
          
          if [[ "${{ steps.changes.outputs.eks }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            modules=$(echo $modules | jq '. + ["eks"]')
          fi
          
          # If no specific changes detected but workflow was triggered, deploy all
          if [[ "$modules" == "[]" && "${{ github.event_name }}" != "pull_request" ]]; then
            modules='["network", "eks"]'
          fi
          
          echo "matrix={\"module\":$modules}" >> $GITHUB_OUTPUT
          echo "Deployment matrix: $modules"

  validate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"module":[]}'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt Validate
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          terragrunt validate

      - name: Terragrunt Plan
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          terragrunt plan -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.module }}
          path: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}/tfplan
          retention-days: 7

  deploy-network:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: |
      contains(needs.detect-changes.outputs.matrix, 'network') && 
      (github.ref == 'refs/heads/main' || github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.event.inputs.environment || 'management' }}
      url: https://console.aws.amazon.com/vpc/home?region=${{ env.AWS_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-network
          path: accounts/management/terragrunt/eu-central-1/network/

      - name: Terragrunt Apply - Network
        working-directory: accounts/management/terragrunt/eu-central-1/network
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terragrunt destroy -auto-approve
          else
            terragrunt apply tfplan
          fi

  deploy-eks:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, deploy-network]
    if: |
      contains(needs.detect-changes.outputs.matrix, 'eks') && 
      (github.ref == 'refs/heads/main' || github.event.inputs.action == 'apply') &&
      (always() && (needs.deploy-network.result == 'success' || needs.deploy-network.result == 'skipped'))
    environment: 
      name: ${{ github.event.inputs.environment || 'management' }}
      url: https://console.aws.amazon.com/eks/home?region=${{ env.AWS_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-eks
          path: accounts/management/terragrunt/eu-central-1/eks/

      - name: Terragrunt Apply - EKS
        working-directory: accounts/management/terragrunt/eu-central-1/eks
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terragrunt destroy -auto-approve
          else
            terragrunt apply tfplan
          fi

      - name: Update kubeconfig
        if: success() && github.event.inputs.action != 'destroy'
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name cloudsensei-mgmt-eks

      - name: Verify EKS cluster
        if: success() && github.event.inputs.action != 'destroy'
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-network, deploy-eks]
    if: always()
    steps:
      - name: Clean up artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: terraform-plans
          pattern: tfplan-*
          delete-merged: true
          retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-network, deploy-eks]
    if: always() && (needs.deploy-network.result != 'skipped' || needs.deploy-eks.result != 'skipped')
    steps:
      - name: Deployment Status Notification
        run: |
          if [[ "${{ needs.deploy-network.result }}" == "success" && "${{ needs.deploy-eks.result }}" == "success" ]]; then
            echo "✅ Infrastructure deployment completed successfully!"
            echo "Network Status: ${{ needs.deploy-network.result }}"
            echo "EKS Status: ${{ needs.deploy-eks.result }}"
          elif [[ "${{ needs.deploy-network.result }}" == "failure" || "${{ needs.deploy-eks.result }}" == "failure" ]]; then
            echo "❌ Infrastructure deployment failed!"
            echo "Network Status: ${{ needs.deploy-network.result }}"
            echo "EKS Status: ${{ needs.deploy-eks.result }}"
            exit 1
          else
            echo "⚠️ Infrastructure deployment completed with mixed results"
            echo "Network Status: ${{ needs.deploy-network.result }}"
            echo "EKS Status: ${{ needs.deploy-eks.result }}"
          fi