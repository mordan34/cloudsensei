name: Terragrunt Infrastructure Deployment (OIDC)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'management'
        type: choice
        options:
        - management
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      modules:
        description: 'Modules to deploy (comma-separated: network,eks or "all")'
        required: false
        default: 'all'
        type: string

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to checkout code
  pull-requests: write # Required to comment on PRs
  issues: write     # Required to create issues

env:
  TG_VERSION: '0.55.1'
  TF_VERSION: '1.6.6'
  AWS_REGION: 'eu-central-1'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        id: scan
        with:
          scan-type: 'config'
          scan-ref: 'accounts/management'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  detect-changes:
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      network-changed: ${{ steps.changes.outputs.network }}
      eks-changed: ${{ steps.changes.outputs.eks }}
      matrix: ${{ steps.matrix.outputs.matrix }}
      deployment-plan: ${{ steps.matrix.outputs.plan }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            network:
              - 'accounts/management/terraform/eu-central-1/network/**'
              - 'accounts/management/terragrunt/eu-central-1/network/**'
            eks:
              - 'accounts/management/terraform/eu-central-1/eks/**'
              - 'accounts/management/terragrunt/eu-central-1/eks/**'

      - name: Set deployment matrix
        id: matrix
        run: |
          modules='[]'
          plan='{"include":[]}'
          
          # Handle manual dispatch with specific modules
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.modules }}" == "all" ]]; then
              modules='["network", "eks"]'
            else
              IFS=',' read -ra MODULES <<< "${{ github.event.inputs.modules }}"
              for module in "${MODULES[@]}"; do
                module=$(echo $module | xargs) # trim whitespace
                modules=$(echo $modules | jq ". + [\"$module\"]")
              done
            fi
          else
            # Auto-detection based on changes
            if [[ "${{ steps.changes.outputs.network }}" == "true" ]]; then
              modules=$(echo $modules | jq '. + ["network"]')
            fi
            
            if [[ "${{ steps.changes.outputs.eks }}" == "true" ]]; then
              modules=$(echo $modules | jq '. + ["eks"]')
            fi
            
            # If no specific changes detected but workflow was triggered, deploy all
            if [[ "$modules" == "[]" && "${{ github.event_name }}" != "pull_request" ]]; then
              modules='["network", "eks"]'
            fi
          fi
          
          # Create deployment plan with dependencies
          for module in $(echo $modules | jq -r '.[]'); do
            if [[ "$module" == "network" ]]; then
              plan=$(echo $plan | jq '.include += [{"module": "network", "depends_on": [], "order": 1}]')
            elif [[ "$module" == "eks" ]]; then
              plan=$(echo $plan | jq '.include += [{"module": "eks", "depends_on": ["network"], "order": 2}]')
            fi
          done
          
          echo "matrix={\"module\":$modules}" >> $GITHUB_OUTPUT
          echo "plan=$plan" >> $GITHUB_OUTPUT
          echo "Deployment matrix: $modules"
          echo "Deployment plan: $plan"

  validate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"module":[]}'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-${{ github.run_id }}-${{ matrix.module }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          aws s3 ls || echo "S3 access verification failed - check permissions"

      - name: Cache Terragrunt
        uses: actions/cache@v4
        with:
          path: |
            ~/.terragrunt
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terragrunt-${{ matrix.module }}-${{ hashFiles('**/*.tf', '**/*.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-${{ matrix.module }}-
            ${{ runner.os }}-terragrunt-

      - name: Terragrunt Init
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          terragrunt init -reconfigure

      - name: Terragrunt Validate
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          terragrunt validate

      - name: Terragrunt Format Check
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          terragrunt fmt -check -recursive

      - name: Terragrunt Plan
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          terragrunt plan -out=tfplan -detailed-exitcode
        continue-on-error: true
        id: plan

      - name: Plan Summary
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          echo "## Terraform Plan Summary for ${{ matrix.module }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          terragrunt show -no-color tfplan | head -50 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.module }}-${{ github.run_id }}
          path: |
            accounts/management/terragrunt/eu-central-1/${{ matrix.module }}/tfplan
            accounts/management/terragrunt/eu-central-1/${{ matrix.module }}/.terraform/
          retention-days: 7

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              const plan = execSync('cd accounts/management/terragrunt/eu-central-1/${{ matrix.module }} && terragrunt show -no-color tfplan', {encoding: 'utf8'});
              
              const comment = `## Terraform Plan for \`${{ matrix.module }}\` module
              
              <details>
              <summary>Show Plan</summary>
              
              \`\`\`hcl
              ${plan.slice(0, 4000)}${plan.length > 4000 ? '\n... (truncated)' : ''}
              \`\`\`
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating comment:', error);
            }

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: |
      needs.detect-changes.outputs.matrix != '{"module":[]}' && 
      (github.ref == 'refs/heads/main' || github.event.inputs.action == 'apply')
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.deployment-plan) }}
      max-parallel: 1  # Deploy one module at a time to respect dependencies
    environment: 
      name: ${{ github.event.inputs.environment || 'management' }}
      url: |
        ${{ matrix.module == 'network' && 'https://console.aws.amazon.com/vpc/home?region=eu-central-1' || 
            matrix.module == 'eks' && 'https://console.aws.amazon.com/eks/home?region=eu-central-1' || 
            'https://console.aws.amazon.com/' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}-${{ matrix.module }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.module }}-${{ github.run_id }}
          path: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}/

      - name: Wait for Dependencies
        if: matrix.depends_on[0] != null
        run: |
          echo "Waiting for dependencies: ${{ join(matrix.depends_on, ', ') }}"
          # Dependencies are handled by job ordering and max-parallel: 1

      - name: Terragrunt Apply
        working-directory: accounts/management/terragrunt/eu-central-1/${{ matrix.module }}
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            echo "⚠️ Destroying infrastructure for ${{ matrix.module }}"
            terragrunt destroy -auto-approve
          else
            echo "🚀 Applying infrastructure for ${{ matrix.module }}"
            terragrunt apply tfplan
          fi

      - name: Post-deployment verification
        if: success() && matrix.module == 'eks' && github.event.inputs.action != 'destroy'
        run: |
          echo "🔍 Verifying EKS cluster deployment"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name cloudsensei-mgmt-eks
          kubectl version --client
          kubectl get nodes || echo "⚠️ Node verification failed - cluster may still be initializing"
          kubectl get pods --all-namespaces | head -10 || echo "⚠️ Pod verification failed"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary for ${{ matrix.module }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.action || 'apply' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Module**: ${{ matrix.module }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'management' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result != 'skipped'
    steps:
      - name: Deployment Status Notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Infrastructure deployment completed successfully!"
            echo "- All modules deployed without issues"
            echo "- Environment: ${{ github.event.inputs.environment || 'management' }}"
            echo "- Action: ${{ github.event.inputs.action || 'apply' }}"
          else
            echo "❌ Infrastructure deployment failed!"
            echo "- Check the deployment logs for details"
            echo "- Environment: ${{ github.event.inputs.environment || 'management' }}"
            echo "- Action: ${{ github.event.inputs.action || 'apply' }}"
            exit 1
          fi

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Infrastructure Deployment Failed - Run #${{ github.run_id }}`;
            const body = `## Deployment Failure Report
            
            **Workflow Run**: [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Environment**: ${{ github.event.inputs.environment || 'management' }}
            **Action**: ${{ github.event.inputs.action || 'apply' }}
            **Triggered by**: @${{ github.actor }}
            **Timestamp**: ${new Date().toISOString()}
            
            ### Next Steps
            - [ ] Review the workflow logs for detailed error messages
            - [ ] Check AWS CloudTrail for any related API failures  
            - [ ] Verify AWS credentials and permissions
            - [ ] Check Terraform state consistency
            - [ ] Consider manual intervention if needed
            
            /cc @${{ github.actor }}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'deployment-failure', 'urgent']
            });